package queryworkload.generator;

import java.util.Random;
import java.util.Vector;

import com.yahoo.ycsb.generator.Generator;

/**
 * Generates a distribution by choosing from a discrete set of values.
 */
public class DiscreteGenerator<T> extends Generator {
	class Pair {
		public double _weight;
		public T _value;

		Pair(double weight, T value) {
			_weight = weight;
			_value = value;
		}
	}

	Vector<Pair> _values;
	Random _random;
	String _laststring;
	boolean _nextStringFlag;

	public DiscreteGenerator() {
		_values = new Vector<Pair>();
		_random = new Random();
		_laststring = null;
		_nextStringFlag = false;

	}

	/**
	 * Generate the next string in the distribution.
	 */
	public String nextString() {
		if (!_nextStringFlag)
			_nextStringFlag = true;

		T value = nextValue();

		if (value == null) {
			_laststring = null;
			return null;
		}
		
		_laststring = value.toString();
		
		return _laststring;
	}

	/**
	 * Return next value.
	 */
	public T nextValue() {
		double sum = 0;

		for (Pair p : _values) {
			sum += p._weight;
		}

		double val = _random.nextDouble();

		for (Pair p : _values) {
			if (val < p._weight / sum) {
				return p._value;
			}

			val -= p._weight / sum;
		}

		// should never get here.
		throw new RuntimeException("should not get here.");
	}

	/**
	 * Return the previous string generated by the distribution; e.g., returned
	 * from the last nextString() call. Calling lastString() should not advance
	 * the distribution or have any side effects. If nextString() has not yet
	 * been called, lastString() should return something reasonable.
	 */
	public String lastString() {
		if (!_nextStringFlag) {
			_laststring = nextString();
		}
		return _laststring;
	}

	public void addValue(double weight, T value) {
		_values.add(new Pair(weight, value));
	}

}
